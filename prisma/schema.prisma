generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector(schema: "public")]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chat[]
}


/// Modelo: KnowledgeBaseEntry
/// Representa uma entrada na base de conhecimento projetada para suportar buscas semânticas,
/// armazenamento de embeddings e metadados associados para rastreabilidade e filtragem.
/// Cada instância contém o conteúdo original, um embedding vetorial para similaridade,
/// um resumo para visualizações rápidas e informações sobre a origem e o processo de indexação.
///
/// Campos:
/// - id: Identificador único autoincremental da entrada.
/// - embedding: Vetor de embedding (pgvector) usado para buscas semânticas e cálculo de similaridade.
/// - rawText: Texto original completo indexado na base de conhecimento.
/// - summary: Resumo sintético do texto original para exibição ou respostas rápidas.
/// - source: Referência opcional à origem do conteúdo (URL, caminho de documento, etc.) para prover provenance.
/// - embeddingModel: Identificador do modelo de embedding utilizado, útil para reproduzir/avaliar resultados.
/// - prompt: Prompt aplicado durante a geração do embedding ou do resumo, para auditoria e replicabilidade.
/// - metadata: Dados estruturados adicionais (tags, idioma, autor, categorias, etc.) para filtragem e enriquecimento.
/// - createdAt: Data de criação da entrada (valor padrão: now()).
/// - updatedAt: Data da última atualização (atualizada automaticamente).
///
/// Uso recomendado:
/// - Armazenar textos indexados com seus embeddings para recuperação semântica.
/// - Conservar informações de provenance e do pipeline de geração (modelo, prompt) para auditoria.
/// - Utilizar metadata para facetas de busca, filtragem por idioma/autor/etiquetas e enriquecimento de resultados.
model KnowledgeBaseEntry {
  id             Int                   @id @default(autoincrement())
  embedding      Unsupported("vector")
  rawText        String
  summary        String
  source         String?
  embeddingModel String?
  prompt         String?
  metadata       Json?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
}

model Chat {
  id        Int       @id @default(autoincrement())
  title     String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int           @id @default(autoincrement())
  text      String
  sender    MessageSender
  chat      Chat          @relation(fields: [chatId], references: [id])
  chatId    Int
  createdAt DateTime       @default(now())
}

enum MessageSender {
  USER
  AI
}
